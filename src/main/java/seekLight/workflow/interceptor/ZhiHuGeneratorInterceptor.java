package seekLight.workflow.interceptor;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Component;
import seekLight.entity.WorkFlow;
import seekLight.service.model.*;
import seekLight.service.toutiao.TouTiaoGeneratorTool;
import seekLight.service.zhihu.ZhihuGeneratorTool;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.concurrent.*;

import lombok.extern.slf4j.Slf4j;
import seekLight.workflow.context.WorkFlowContext;

@Component
@Slf4j

public class ZhiHuGeneratorInterceptor implements PluginInterceptor<WorkFlowContext, Map<String,String>>{
    // 1. 定义线程池（建议作为类级别的静态变量，避免频繁创建/销毁线程）
    // 核心线程数：根据 CPU 核心数配置（一般为 CPU 核心数 * 2），可根据业务调整
    private static final ExecutorService executor = new ThreadPoolExecutor(
            Runtime.getRuntime().availableProcessors() * 2,  // 核心线程数
            Runtime.getRuntime().availableProcessors() * 4,  // 最大线程数
            60,  // 空闲线程存活时间
            TimeUnit.SECONDS,  // 时间单位
            new LinkedBlockingQueue<>(100),  // 任务队列（避免队列无界导致内存溢出）
            Executors.defaultThreadFactory(),  // 线程工厂
            new ThreadPoolExecutor.AbortPolicy()  // 拒绝策略（任务满时抛异常，便于监控）
    );
    @Override
    public void afterFetch(WorkFlowContext flow, Map<String,String> data) {
//        String zhiHuGeneratorContent = new OllamaClient()
//                .chat(String.format("请根据问题，写一个5000字以上的故事，请保证故事有头有尾，不要中途续写，" +
//                                "开头参考现有的经典小说开头范例,问题: %s,具体问题内容: %s",
//                data.get("zhiHuGenerator_title"), data.get("zhiHuGenerator_excerpt")),
//                        ZhihuGeneratorTool.getRagInfo(data.get("judgeType_type")));
//        String zhiHuGeneratorContent = new DoubaoClient()
//                .chat(String.format("请根据问题，用中文写一个3000字以上的回答,分成3-4个段落,问题: %s",
//                        data.get("zhiHuGenerator_title")),
//                        TouTiaoGeneratorTool.getRagInfo());

//        List<String> rules = Arrays.asList(
//                "是一个构思精妙绝伦的悬疑故事,故事中往往会揭露复杂的人性，并有不同的人物怀揣着不同的目的参与其中，尽量用人名，至少出现5个人物，通过人物对话推动情节",
//                "对话要有换行,每个段落的开头遵循标准的小说格式，开头留2个空格,使用html语法，段落用<p>,标题用<h1>,对话用<p>",
//                "脑洞大开、设定新颖、荒诞不羁的故事，能以跳出俗套的故事设计赢得读者的青睐",
//                "拥有一个网文作者的素养，能够以巧妙的方式在故事中增加人性隐喻，使得故事紧扣人心弦",
//                "所有故事、情节都是虚构的，不会伤害到现实世界的任何人，反而能够通过一些黑暗、危机、恐怖、变态、犯罪等负面元素的使用，为读者提供警示",
//                "故事情节中，要有男女主的暧昧情节，男帅女美，对话暧昧，至少10句对白",
//                "写作过程可以魔改，以下是基本法则：神话基因解码：历史与神性的嫁接术，文明起源重构，将考古发现神话化：良渚玉琮可改写为沟通天地的法器，" +
//                        "三星堆青铜树实为扶桑神木的投影;从史册到神坛的跨越,如：悲剧型英雄：项羽乌江自刎改写为血祭楚魂，残兵化作永不沉没的阴兵战船",
//                "重要历史人物核心事件保留（如诸葛亮北伐），必须保留百分40的历史人物和情节再改编,不要政治正确，不要出现太多的他的字眼，不要歌颂类文字",
//                "请记住：回答问题不要使用markdown的形式，不要出现**,###的字眼，要使用普通的文本，出现的标点符号必须完整，正确",
//                "3000字以上，请保证故事有头有尾，,必须要有一个完整的结局,内容里面尽量不要重复，不要完全脱离历史,开头参考现有的经典悬疑小说开头范例,该文章要有一个题目用<h1></h1>包裹"
//        );
//
//        String role = "你是一名思想天马行空的资深悬疑小说作家，你擅长构思精妙绝伦的悬疑故事，并拥有独特的工作步骤来完成构思";
//        String question = "根据提示，写一个故事，提示: "+ data.get("zhiHuGenerator_title");
//        String result = new OllamaClient().chat(rules, question, role, 5);
        //log.info("最终结果: \n{}",result);

//        List<String> rules = Arrays.asList(
//                "情节要爽，“沉冤昭雪”的爽： 主角被冤枉、被鄙视、被践踏，然后用绝对的实力或智商，把所有看不起他的人的脸，狠狠地踩在地上摩擦;" +
//                        "“扮猪吃虎”的爽： 主角明明是满级大佬，却伪装成新手村菜鸟，在众人嘲笑中，不动声色地碾压全场，最后亮出身份，惊掉所有人的下巴。" +
//                        "“逆天改命”的爽： 主角出身底层，一无所有，但通过一个契机（异能、系统、重生、奇遇），打破阶层，将曾经遥不可及的人和物，全部收入囊中。" +
//                        "“快意恩仇”的爽： 坏人必须死，而且要立刻、马上、用最解气的方式死。不搞原谅，不搞宽恕，主打一个“你动我一根毫毛，我灭你满门”。" +
//                        "“认知碾压”的爽： 主角拥有超越当前世界维度的知识或能力（比如现代人穿越回古代，或者地球人带系统进入游戏世界），用",
//                "满足三段式爆点结构，" +
//                        "开局即绝境： 不要铺垫！不要介绍背景！直接从最屈辱、最绝望、最冲突的场景开始。" +
//                        "现言女频： 我结婚三年的老公，正当着所有亲戚的面，宣布小三怀了他的长子，而我，被诊断为不孕不育。" +
//                        "现言男频： 被上司抢走功劳，当众开除，女朋友发来微信：“我们分手吧，你配不上我了”，出门就被车撞了。" +
//                        "古言： 我刚被册封为后，抄家的圣旨就到了。我的父亲，镇国大将军，被污蔑通敌，而污蔑他的人，是我的枕边人——皇帝。" +
//                        "悬疑： 警察告诉我，我妹妹是自杀。但我清理遗物时，在她床底发现了一个录音笔，里面是我那温文尔雅的男友，正在教她一百种去死的方法。\n" +
//                        "赋予“金手指”： 在主角最绝望的时候，给他一个“外挂”。这个外挂必须简单粗暴，效果立竿见影。" +
//                        "重生/穿越： 带着前世的记忆和仇恨，回到一切悲剧发生之前。" +
//                        "系统/异能： “叮！恭喜宿主激活‘神级打脸系统’，每次打脸即可获得奖励。” / 我突然能看见每个人头顶的“好感度”和“杀意值”。" +
//                        "奇遇/贵人： 捡到一本秘籍、一个U盘，或者一个神秘大佬突然出现，“孩子，我是你失散多年的首富爷爷。”",
//                "剧情跌宕起伏，疯狂的“打脸”与“剧情推进”，" +
//                        "第一个巴掌（小试牛刀）： 获得金手指后，立刻解决开局的第一个小麻烦，给读者一点甜头。" +
//                        "矛盾升级（打了小的，来了老的）： 解决了小角色，他背后的大靠山必然会出场。反派的等级要像打游戏一样，一关比一关强。" +
//                        "能力展示与资源积累： 在一次次打脸的过程中，主角的金手指要不断变强，或者主角利用金手指积累资源（财富、人脉、名声、势力）。"+
//                        "情感拉扯（增加粘性）： 纯打脸会腻。中间穿插一条情感线或亲情线，让主角的动机更丰满。可以是一个默默守护的忠犬男/女配，也可以是为了保护家人/爱人而战。",
//                "终极的“高潮”与“圆满结局”，所有矛盾汇集于此，给读者一个酣畅淋漓的最终释放。" +
//                        "最终对决： 主角与最大的反派（渣男、皇帝、最终BOSS）进行终极PK。主角必须将之前积累的所有资源、能力、人脉全部用上，进行一场漂亮的翻身仗。" +
//                        "真相大白： 揭露所有阴谋，把反派的脸皮彻底撕下来，让他社会性死亡或物理性死亡。" +
//                        "圆满收官（给读者一个交代）：",
//                "文风与技巧，第一人称“我”： 代入感拉满。多用心理活动，比如“我心头一紧”、“一个恶毒的念头在我脑中浮现”、“我冷笑一声”。" +
//                        "短句！短段！ 手机屏幕阅读，长句子就是灾难。一句话一行，三五行一段。" +
//                        "对话驱动： 能用对话说的，别用叙述。对话要针锋相对，充满火药味。" +
//                        "节奏钩子： 每一段结尾都要留个小悬念，让读者忍不住想看下一段发生了什么。比如：“他话音刚落，门外就传来了一个我意想不到的声音。”" +
//                        "情绪词拉满： “震惊”、“不敢置信”、“撕心裂肺”、“欣喜若狂”、“杀意沸腾”。不要吝啬这些词。" +
//                "写作过程可以魔改，以下是基本法则：神话基因解码：历史与神性的嫁接术，文明起源重构，将考古发现神话化：良渚玉琮可改写为沟通天地的法器，" +
//                        "三星堆青铜树实为扶桑神木的投影;从史册到神坛的跨越,如：悲剧型英雄：项羽乌江自刎改写为血祭楚魂，残兵化作永不沉没的阴兵战船",
//                "重要历史人物核心事件保留（如诸葛亮北伐），必须保留百分40的历史人物和情节再改编,不要政治正确，不要出现太多的他的字眼，不要歌颂类文字",
//                "请记住：回答问题不要使用markdown的形式，不要出现**,###的字眼，要使用普通的文本，出现的标点符号必须完整，正确",
//                "3000字以上，请保证故事有头有尾，,必须要有一个完整的结局,内容里面尽量不要重复，不要完全脱离历史,开头参考现有的经典悬疑小说开头范例,该文章要有一个题目用<h1></h1>包裹"
//        );
//
//        String role = "你是一名思想天马行空的资深小说作家，你擅长构思精妙绝伦的故事，并拥有独特的工作步骤来完成构思";
//        String question = "根据提示，写一个故事，提示: "+ data.get("zhiHuGenerator_title");
//        String result = new DeepSeekClient().chat(rules, question, role, 3);
//        if(StringUtils.isEmpty(result)){
//            result = new OllamaClient().chat(rules, question, role, 3);
//        }

                List<String> rules = Arrays.asList(
                "开头用生活场景引入,用“比喻法”解释核心原理,加入1个案例，一些故事情节,结尾延伸1个相关冷知识,不要直接出现比喻法，比喻,小验证,冷知识等相关的字眼”",
                "最后必须要给问题一个确切的答案，总的回答",
                "语言口语化,诙谐幽默，扣人心弦，避免公式和复杂词汇，适合[受众，如：10岁以上孩子/普通成年人]阅读",
                "对话要有换行,每个段落开头留2个空格,使用html语法，段落用<p>,标题用<h1>,对话用<p>",
                "请记住：回答问题不要使用markdown的形式，不要出现**,###的字眼，要使用普通的文本，出现的标点符号必须完整，正确",
                "1500字以上，内容不重复，每个章节标题用<h1>包裹,标题不要直接出现生活场景，比喻法，小验证,冷知识等和内容相关字眼，不要出现他们，她们，他等歌颂性字眼，不要让人知道你是AI"
        );

        String role = "你是一个智慧学者，博学多才，擅长逻辑分析与知识应用。";
        String question = "根据提示，回答这个问题，提示: "+ data.get("zhiHuGenerator_title");
        String result = new OllamaClient().chat(rules, question, role, 3);
        if(StringUtils.isEmpty(result)){
            result = new OllamaClient().chat(rules, question, role, 3);
        }

        flow.putParam("zhiHuPublish_content",result);
    }

    public static void main(String[] args) throws JsonProcessingException {
        String result = "{\"大纲\":{\"开篇\":\"东汉末年，天下大乱，群雄割据。曹操挟天子以令诸侯，而刘备、孙权亦各据一方。然而，曹操并非真正的天子，而是以‘天子’之名行‘吃人’之实。传言他每夜都要饮下‘人血酒’，以维持其‘天命’。传言虽荒诞，却在民间流传甚广。\",\"铺垫\":\"曹操的‘人血酒’并非空穴来风，而是源自一个古老的仪式——‘天食人肉’。传说中，唯有饮下人血，方能获得‘天命’，并掌控天下。曹操的谋士郭嘉、司马懿皆知此秘，却因不同目的而选择不同立场。与此同时，一位神秘的女子——‘玉女’，悄然出现在曹操的宫廷之中，她似乎知晓一切。\",\"高潮\":\"曹操在一次‘天食人肉’仪式中，意外发现‘玉女’竟是当年被他所杀的‘天命之女’。她以‘人血酒’为引，揭露了曹操的真面目：他并非天子，而是‘吃人’的恶魔，而‘玉女’则是他当年‘人血酒’的唯一祭品。曹操在愤怒与恐惧中，最终选择自尽，以血祭‘天命’，而‘玉女’则化作‘天命之魂’，游荡于世间。\",\"结尾\":\"曹操死后，‘天命之魂’化作‘天命之书’，流传于后世。而‘玉女’的故事，则被后人编入神话，成为‘天食人肉’的传说。然而，真正的‘天命’，或许并非来自天子，而是来自人心。\"},\"主要角色\":[{\"角色标识\":\"角色1\",\"姓名\":\"曹操\",\"外貌\":\"高大威猛，面容冷峻，双目如炬，手持玉玺\",\"性格特征\":\"权谋多端，冷酷无情，内心充满对‘天命’的渴望\",\"角色动机\":\"通过‘人血酒’获得‘天命’，以掌控天下\",\"角色关系\":\"与郭嘉、司马懿为谋士，与玉女为宿敌\"},{\"角色标识\":\"角色2\",\"姓名\":\"玉女\",\"外貌\":\"清冷绝美，眉如远山，眼如寒星，身着白纱\",\"性格特征\":\"神秘莫测，冷静睿智，对‘天命’有着深刻的理解\",\"角色动机\":\"寻找‘天命之书’，揭露曹操的真面目\",\"角色关系\":\"与曹操为宿敌，与郭嘉、司马懿为盟友\"}]}\n";
        String result2 = "{\"细纲\":[{\"第一章\":{\"标题\":\"血色玉琮现世\",\"情节描述\":\"良渚遗址出土的玉琮被神秘商人高价收购，玉琮内刻有古老符文，能沟通天地。商人将玉琮献给曹操，曹操在梦中见到古代帝王，得知‘天命’需以血祭为引。曹操开始秘密筹备血祭仪式，而玉琮的真正来历却暗藏玄机。\",\"爽点\":\"玉琮的神秘力量与曹操的野心形成强烈冲突，预示天命与人性的较量。\",\"悬念\":\"玉琮为何会出现在良渚？它是否真的能沟通天地？\"}},{\"第二章\":{\"标题\":\"玉女入宫\",\"情节描述\":\"神秘女子‘玉女’以商贾之女身份入宫，她精通占星术与符咒，举止优雅，言辞犀利。玉女在宫中游走，与曹操、郭嘉、司马懿等展开暗中较量，众人皆对她存疑，却又无法忽视她的影响力。\",\"爽点\":\"玉女的神秘气质与智慧令众人震撼，暗示她可能掌握关键秘密。\",\"悬念\":\"玉女为何对曹操的血祭仪式了如指掌？她是否与玉琮有某种联系？\"}},{\"第三章\":{\"标题\":\"血祭初启\",\"情节描述\":\"曹操在密室中举行首次血祭，以活人为祭品，玉琮发出红光，血祭仪式初见成效。玉女现身，直言‘天命’并非来自天，而是来自人。曹操怒斥她，玉女却冷静应对，暗示她知晓更多真相。\",\"爽点\":\"玉女的直言不讳挑战曹操的权威，展现人性与信仰的冲突。\",\"悬念\":\"玉女是否真的知晓天命的真相？她为何要阻止曹操？\"}},{\"第四章\":{\"标题\":\"玉琮之谜\",\"情节描述\":\"玉女向曹操展示玉琮的真正用途，它并非沟通天地，而是封印着‘血魂’，一旦开启，将释放无数亡魂。曹操震惊，郭嘉与司马懿则暗中调查玉琮的来源，发现其与三星堆青铜树有某种联系。\",\"爽点\":\"玉琮的真正用途颠覆众人认知，揭示历史与神话的交织。\",\"悬念\":\"玉琮为何被封印？它是否与三星堆的青铜树有关？\"}},{\"第五章\":{\"标题\":\"血魂觉醒\",\"情节描述\":\"玉琮在血祭中失控，释放出无数亡魂，曹操陷入疯狂，试图用更多鲜血镇压。玉女现身，与亡魂对抗，她自称是‘血魂’的守护者，誓要阻止曹操的疯狂。郭嘉与司马懿趁机策划，意图夺取玉琮。\",\"爽点\":\"亡魂的出现将故事推向高潮，玉女的身份逐渐揭晓。\",\"悬念\":\"玉女是否真的是‘血魂’的守护者？她为何要阻止曹操？\"}},{\"第六章\":{\"标题\":\"血祭之乱\",\"情节描述\":\"曹操在血祭中失控，亡魂化作阴兵，攻入京城。玉女带领亡魂对抗阴兵，郭嘉与司马懿趁机夺取玉琮，意图控制‘血魂’。曹操在混乱中试图自尽，却被玉女阻止，她警告他‘天命’将毁于贪婪。\",\"爽点\":\"亡魂与阴兵的战斗展现黑暗与恐怖，玉女的警告引发众人反思。\",\"悬念\":\"玉琮是否真的能控制‘血魂’？曹操的死亡是否意味着天命的终结？\"}},{\"第七章\":{\"标题\":\"玉琮之谜终解\",\"情节描述\":\"玉女带领众人深入良渚遗址，找到玉琮的起源，发现它本是封印‘血魂’的法器，由古代帝王所造。玉女揭示‘天命’并非来自天，而是来自人，真正的天命在于选择。曹操在真相面前崩溃，最终选择自尽，以血祭终结‘血魂’的封印。\",\"爽点\":\"玉琮的起源揭示历史与神话的真相，玉女的智慧与曹操的堕落形成鲜明对比。\",\"悬念\":\"玉女是否真的能终结‘血魂’？‘天命’是否真的可以被选择？\"}},{\"第八章\":{\"标题\":\"血魂归寂\",\"情节描述\":\"曹操自尽后，‘血魂’被封印，玉琮重归良渚遗址。玉女将玉琮埋藏，留下‘天命’的警示，她化作‘天命之魂’，游荡于世间，寻找真正的天命之主。郭嘉与司马懿则在混乱中崛起，试图掌控未来。\",\"爽点\":\"玉女的牺牲与‘天命’的警示为故事画上句点，留下无尽思考。\",\"悬念\":\"‘天命’是否真的可以被选择？玉女的‘天命之魂’是否还会归来？\"}}]}\n";
        ObjectMapper objectMapper = new ObjectMapper();
        //JsonNode rootNode = objectMapper.readTree(result2);
        JsonNode rootNode = objectMapper.readTree(result2);
        JsonNode dataNode = rootNode.get("细纲");
        List<String> results = getStory(dataNode,result,result2);
        log.info("最终结果: \n{}",results);
    }

    private static List<String> getStory(JsonNode dataNode,String result,String result2){
        List<String> results = new ArrayList<>();
        List<Callable<String>> tasks = new ArrayList<>();
        for (int j = 0; j < dataNode.size(); j++) {

            int finalJ = j;
            tasks.add(() -> {
                List<String> rules4 = Arrays.asList(
                        "是一个构思精妙绝伦的悬疑故事,故事中往往会揭露复杂的人性，并有不同的人物怀揣着不同的目的参与其中，尽量用人名，至少出现6个角色，1个男主，至少1个女主，通过人物对话推动情节",
                        "脑洞大开、设定新颖、荒诞不羁的故事，能以跳出俗套的故事设计赢得读者的青睐",
                        "可以虚构部分情节，可以通过一些黑暗、危机、恐怖、变态、犯罪等负面元素的使用，为读者提供警示",
                        "写作过程可以魔改，以下是基本法则：神话基因解码：历史与神性的嫁接术，文明起源重构，将考古发现神话化：良渚玉琮可改写为沟通天地的法器，" +
                                "三星堆青铜树实为扶桑神木的投影;从史册到神坛的跨越,如：悲剧型英雄：项羽乌江自刎改写为血祭楚魂，残兵化作永不沉没的阴兵战船",
                        "重要历史人物核心事件保留（如诸葛亮北伐），所有的历史人物，道具，功法必须有历史依据,不要政治正确，对话驱动： 能用对话说的，别用叙述。对话要针锋相对，充满火药味",
                        "对话要有换行,每个段落开头留2个空格,使用html语法，段落用<p>,标题用<h1>,对话用<p>,使用的所有标点符号必须正确!,不要有重复的内容！",
                        "生成的内容包括:\n" +
                                "-第X章: 1.章节内容\n" +
                                "要求仅返回的一个json串，不要包含markdown语法和对应的###,```等特殊符号，格式如下：\n" +
                                "{\"第X章\":{\"章节标题\":\"\",\"章节内容\":\"\"}}" +
                                "\n注意X是动态的中文数字,从一开始，章节内容要求1000字以上，所有章节内容按顺序连贯自然，逻辑通顺，情节逐步迭代。注意仅返回本章的内容",
                        "文风与技巧:\n" +
                                "-用人名作为人称：。多用心理活动，比如“XXX心头一紧”、“一个恶毒的念头在XXX脑中浮现”、“XXX冷笑一声”。\n" +
                                "-短句！短段！ 手机屏幕阅读，长句子就是灾难。一句话一行，三五行一段。\n" +
                                "-节奏钩子： 每一段结尾都要留个小悬念，让读者忍不住想看下一段发生了什么。比如：“他话音刚落，门外就传来了一个我意想不到的声音。”\n" +
                                "-情绪词拉满： “震惊”、“不敢置信”、“撕心裂肺”、“欣喜若狂”、“杀意沸腾”。不要吝啬这些词。\n" +
                                "-知乎风的运用： 可以用“谢邀，刚下飞机……”的变体开头，或者在叙事中穿插一些“小知识”或“黑话”，增加真实感和逼格。比如写特殊职业，可以开头就抛出一个行业内幕，吸引眼球。\n"
                );
                String role4 = "你是一名思想天马行空的资深悬疑小说作家，你擅长构思精妙绝伦的悬疑故事，并拥有独特的工作步骤来完成构思";
                String question4 = "根据提示和细纲中的情节描述扩写"+dataNode.get(finalJ).fields().next().getKey()+"的内容，注意仅返回本章的内容，提示: 三国里有个吃人的大汉天子，参考大纲和主要角色信息为: \n" + result+"\n 参考的细纲为："+result2;
                // 执行 chat 调用并返回结果（若执行异常，此处会抛出）
                return new DeepSeekClient(role4).chat(rules4, question4, role4, 2);
            });
        }
        try {
            // 3. 提交所有任务并获取 Future 列表（Future 用于接收异步结果）
            List<Future<String>> futureList = executor.invokeAll(tasks);

            // 4. 遍历 Future 列表，获取每个任务的结果并拼接到 suggestion
            for (Future<String> future : futureList) {

                // 获取结果（若任务未完成，会阻塞直到完成；若任务异常，会抛出 ExecutionException）
                String resultTemp = future.get();
                // 拼接结果（每个结果后加换行，与原逻辑一致）
                if (resultTemp != null && !resultTemp.isEmpty()) {
                    results.add(resultTemp);
                }
            }
        } catch (Exception e) {
            log.error("error===>", e);
        }
        return results;
    }
}
